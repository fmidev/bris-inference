{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "resource:schema.json",
    "title": "Schema for bris inference configuration",
    "description": "This schema provides definitions for the bris-inference configuration files",
    "type": "object",
    "definitions": {
        "VerifOutput": {
            "description": "Verif-compatible Netcdf output file",
            "type": "object",
            "properties": {
                "verif": {
                    "type": "object",
                    "properties": {
                        "filename": {
                            "description": "Filename of output. Use %R for run_name",
                            "type": "string"
                        },
                        "variable": {
                            "description": "What anemoi variable to verify? Can include variables that can be diagnosed from other variables (e.g. 10si from 10u and 10v)",
                            "type": "string"
                        },
                        "thresholds": {"type": "array", "items": {"type": "number"}},
                        "quantiles": {"type": "array", "items": {"type": "number", "minimum": 0, "maximum": 1}},
                        "units": {
                            "description": "What units to write in the output file. If unspecified, use the units from the anemoi input dataset",
                            "type": "string"
                        },
                        "obs_sources": {
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {"$ref": "#/definitions/VerifSource"},
                                    {"$ref": "#/definitions/FrostSource"}
                                ]
                            }
                        }
                    },
                    "required": ["filename", "variable", "obs_sources"]
                }
            },
            "required": ["verif"]
        },

        "NetcdfOutput": {
            "description": "Netcdf output file with MET Norway conventions",
            "type": "object",
            "properties": {
                "netcdf": {
                    "type": "object",
                    "properties": {
                        "filename_pattern": {
                            "description": "Where to write the output file. Time tokens allowed (e.g. %Y%m%d)",
                            "type": "string"
                        },
                        "variables": {
                            "description": "What variables to output? Leave empty to write all",
                            "type": "array",
                            "items": {"type": "string"}
                        },
                        "extra_variables": {
                            "description": "Derive these extra variables (use GRIB short names)",
                            "type": "array",
                            "items": {"type": "string"}
                        },
                        "proj4_str": {
                            "description": "Assume this projection string when computing x/y coordinates",
                            "type": "string"
                        },
                        "domain_name": {
                            "description": "Retrieve projection from this predefined domain name (e.g. meps)",
                            "type": "string"
                        }
                    },
                    "required": ["filename_pattern"]
                }
            },
            "required": ["netcdf"]
        },

        "GribOutput": {
            "description": "Grib output file",
            "type": "object",
            "properties": {
                "grib": {
                    "type": "object",
                    "properties": {
                        "filename_pattern": {
                            "description": "Where to write the output file. Time tokens allowed (e.g. %Y%m%d)",
                            "type": "string"
                        },
                        "variables": {
                            "description": "What variables to output? Leave empty to write all",
                            "type": "array",
                            "items": {"type": "string"}
                        }
                    },
                    "required": ["filename_pattern"]
                }
            },
            "required": ["grib"]
        },

        "VerifSource": {
            "description": "Observations stored in a Netcdf verif file",
            "type": "object",
            "properties": {
                "verif": {
                    "type": "object",
                    "properties": {
                        "filename": {
                            "description": "Where the file is located",
                            "type": "string"
                        }
                    },
                    "required": ["filename"]
                }
            },
            "required": ["verif"]
        },

        "FrostSource": {
            "type": "object",
            "properties": {
                "frost": {
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            } ,
            "required": ["frost"]
        }
    },
    "properties": {
        "start_date": {
            "description": "First date to produce a forecast. E.g. 2023-11-24T12:00:00",
            "format": "date-time"
        },
        "end_date": {
            "description": "Last date to produce a forecast. E.g. 2023-11-24T12:00:00",
            "format": "date-time"
        },
        "frequency": {
            "description": "How often to make forecast runs? E.g. 6h",
            "type": "string"
        },
        "leadtimes": {
            "description": "What leadtimes should be provided in the output?",
            "type": "integer",
            "minimum": 1
        },
        "release_cache": {
            "description": "This option releases unused cached/memory used by torch",
            "type": "boolean"
        },
        "workdir": {
            "description": "Path to work directory",
            "type": "string"
        },
        "dataset": {
            "description": "Input dataset. Can be a single path, or two datasets merged by cutout. Example dataset.cutout = ['/path/dataset1', '/path/dataset2' ]",
            "min_distance_km": {"type": "int", "minimum": 0},
            "adjust": {"type": "string"}
        },
        "routing": {
            "type": "array",
            "items":  {
                "type": "object",
                "properties": {
                    "decoder_index": {"type": "integer", "minimum": 0},
                    "domain_index": {"type": "integer", "minimum": 0},
                    "outputs": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {"$ref": "#/definitions/NetcdfOutput"},
                                {"$ref": "#/definitions/VerifOutput"},
                                {"$ref": "#/definitions/GribOutput"}
                            ]
                        }
                    }
                }
            }
        }
    },
    "required": ["leadtimes", "frequency", "release_cache", "dataset", "workdir"]
}
